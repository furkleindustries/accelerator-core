(function () {
  var docElem = document.documentElement;
  try {
    if (sessionStorage && sessionStorage.XLR8R_FONTS_LOADED) {
      docElem.className += docElem.className ?
        ' fonts-loaded' :
        'fonts-loaded';
    } else {
      loadFullFonts();
    }
  } catch (err) {
    console.warn(err);
    loadFullFonts();
  }
  function loadSingleFont(fontLoader) {
    return fontLoader.load()
      .then(
        function (font) {
          console.log('The font \"' + font.family + ' ' + font.style + ' ' + font.weight + '\" loaded correctly.');
        },
        function (err) {
          console.error('An error occurred while loading the font \"' + font.family + ' ' + font.style + ' ' + font.weight + '\":\n' + err);
        }
      );
  }
  function loadFullFonts() {
    var promises = {{{fontsToLoad}}}.reduce(function (arr, font) {
      if (!font.family) {
        throw new Error('No font or font family provided in accelerator.config.js fonts entry.');
      }
      var family = font.family;
      var styles = font.styles || [];
      var weights = font.weights || [];
      return arr.concat(styles.reduce(function (arr, style) {
        return arr.concat(weights.reduce(function (arr, weight) {
          var realStyle = String(style || 'normal').toLowerCase();
          return arr.concat([
            loadSingleFont(new FontFaceObserver(family, {
              style: realStyle,
              weight: String(weight || 'normal').toLowerCase()
            }))
          ]);
        }, []));
      }, []));
    }, []);
    return Promise.all(promises).then(
      function () {
        docElem.className += docElem.className ?
          ' fonts-loaded' :
          'fonts-loaded';
        // Optimization for Repeat Views
        try {
          if (typeof sessionStorage !== 'undefined') {
            sessionStorage.XLR8R_FONTS_LOADED = true;
          }
        } catch (err) {
          console.warn(err);
        }
      },
      function (err) { console.error(err) }
    );
  }
})();
