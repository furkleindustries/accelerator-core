import * as fs from 'fs-extra';
import {
  getAutogeneratedFileWarningText,
} from './functions/getAutogeneratedFileWarningText';
import {
  getAuthoredImportsMetadata,
} from './functions/getAuthoredImportsMetadata';
import {
  getHotReloadAcceptor,
} from './functions/getHotReloadAcceptor';
import {
  getAuthoredAssetObjectDefinitions,
} from './functions/getAuthoredAssetObjectDefinitions';
import * as path from 'path';
import {
  setUnhandledRejectionEvent,
} from './functions/setUnhandledRejectionEvent';
import {
  scrapeAssets,
} from './functions/scrapeAssets';

setUnhandledRejectionEvent();

const authoredHeadersDir = path.join(__dirname, '..', 'headers');

(async () => {
  try {
    const files = await scrapeAssets(authoredHeadersDir);

    const {
      importPaths,
      imports,
      registry,
    } = getAuthoredImportsMetadata(files);

    const authoredAssets = getAuthoredAssetObjectDefinitions(files);
    const hotReloadAcceptor = getHotReloadAcceptor(importPaths);

    const manifestStr =
      getAutogeneratedFileWarningText() +
      '\n\nimport {\n  IHeaderManifestItem,\n} from \'../src/passages/IHeaderManifestItem\';\n' +
      '\n' +
      (imports.length ? `${imports.join('\n')}\n` : '') +
      'const manifest: readonly IHeaderManifestItem[] = ' +
      (authoredAssets.length ? `[\n${authoredAssets.join('\n  ')}\n];` : '[];') +
      '\n\n' +
      'export default manifest;\n\n' +
      `export const registry = ${JSON.stringify(registry, null, 2)};\n` +
      (hotReloadAcceptor ? `\n${hotReloadAcceptor}` : '');

    const manifestPath = path.join(authoredHeadersDir, 'headers-manifest.ts');
    await fs.writeFile(manifestPath, manifestStr);
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
