// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/setBaseEnv')('development');

const { checkBrowsers } = require('react-dev-utils/browsersHelper');
const chalk = require('chalk');
const checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');
//const clearConsole = require('react-dev-utils/clearConsole');
const config = require('../config/webpack/webpack.config');
const createDevServerConfig = require('../config/webpack/webpackDevServer.config');
const openBrowser = require('react-dev-utils/openBrowser');
const paths = require('../config/paths');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');

const packageJson = require(paths.appPackageJson);

const {
  env: {
    HOST,
    HTTPS,
    PORT,
  },

  exit,
  stdout: { isTty: isInteractive },
} = process;

// Warn and crash if required files are missing
if (!checkRequiredFiles([ paths.appHtml, paths.appIndex, paths.appPackageJson ])) {
  exit(1);
}

// Tools like Cloud9 rely on this.
const defaultPort = parseInt(PORT, 10) || 3000;
const host = HOST || '0.0.0.0';

if (HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(host)
      )}`
    )
  );

  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );

  console.log(
    `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}\n`
  );
}

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
checkBrowsers(paths.appPath, isInteractive)
// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `choosePort()` Promise resolves to the next free port.
  .then(() => choosePort(host, defaultPort))
  .then((port) => {
    if (port === null) {
      // We have not found a port.
      return;
    }

    const protocol = HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;

    const urls = prepareUrls(protocol, host, port);
    const {
      lanUrlForConfig,
      localUrlForBrowser,
    } = urls;

    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(webpack, config, appName, urls);
    // Load proxy config
    const proxySetting = packageJson.proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
        proxyConfig,
        lanUrlForConfig,
    );

    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, host, err => {
      if (err && err.stack) {
        console.error(chalk.red(err.stack));
        return;
      } else if (isInteractive) {
        //clearConsole();
      }

      console.log(chalk.cyan('Starting the development server...\n'));
      openBrowser(localUrlForBrowser);
    });

    [ 'SIGINT', 'SIGTERM', ].forEach((sig) => {
      process.on(sig, () => {
        devServer.close();
        exit();
      });
    });
  }).catch((err) => {
    if (err && err.stack) {
      console.error(chalk.red(err.stack));
    }

    exit(1);
  });
