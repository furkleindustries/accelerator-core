import chalk from 'chalk';
import {
  downloadFontFiles,
} from '../src/fonts/downloadFontFiles';
import {
  downloadFontHelper,
} from '../src/fonts/downloadFontHelper';
import * as fs from 'fs-extra';
import {
  getFontFaceRules,
} from '../src/fonts/getFontFaceRules';
import * as path from 'path';
import {
  paths,
} from '../config/paths';
import {
  setUnhandledRejectionEvent,
} from './functions/setUnhandledRejectionEvent';
import slash from 'slash';

setUnhandledRejectionEvent();

(async () => {
  const {
    default: config,
  } = await import('../accelerator.config');

  const {
    debug,
    fontsToLoad,
  } = config;

  /* Don't do anything if the user doesn't indicate any fonts to load. */
  if (!fontsToLoad) {
    console.log(
      'The fontsToLoad property was not present in accelerator.config.js. ' +
        'No fonts will be loaded.',
    );

    return;
  }

  const fontsAlreadyExist = await fs.pathExists(paths.fontAutogeneratedStyle);
  if (fontsAlreadyExist) {
    console.log(chalk.green(
      `The autoloaded font file was found at "${chalk.underline(paths.fontAutogeneratedStyle)}".`,
    ));

    return;
  }

  const errorHeader = 'The following error occurred when loading your fonts:';
  const genericWarning = 'Your fonts may not work as expected. Please correct ' +
    'the error and rebuild.';

  const printWarning = (err) => {
    console.warn(chalk.yellow(errorHeader));
    console.warn(chalk.yellow((err.stack || err).toString()));
    console.warn(chalk.yellow(genericWarning));
  };

  try {
    await fs.remove(paths.fontsAutogenerationDir);
  } catch (err) {
    if (err.code !== 'EEXIST') {
      console.warn(chalk.yellow('Encountered an error removing the public/fonts/ directory.'));
      printWarning(err);
      return;
    }
  }

  try {
    await fs.mkdirp(paths.fontsAutogenerationDir);
  } catch (err) {
    console.error(chalk.red('Encountered an error creating the public/fonts/ directory.'));
    console.error(chalk.red(err.toString()));
    process.exit(1);
  }

  const fontFaceRules = [];
  let fontFiles;
  try {
    const fontHelpers = await Promise.all(fontsToLoad.map(downloadFontHelper));
    fontFiles = (await Promise.all(fontHelpers.map((fontHelper, index) => {
      const fontToLoad = { ...fontsToLoad[index] };
      const rules = getFontFaceRules(
        'fonts/autogenerated',
        fontToLoad,
        fontHelper,
      );

      fontFaceRules.push(...rules);

      return downloadFontFiles(
        fontToLoad,
        fontHelper,
        paths.fontsAutogenerationDir,
      );
    }))).reduce(
      (oneDArr, twoDArr) => oneDArr.concat(twoDArr),
      [],
    );
  } catch (err) {
    printWarning(err);
    return;
  }

  if (debug) {
    console.log(chalk.green('Downloaded fonts successfully.\n'));
    console.log(
      'Fonts downloaded:\n' +
        `  ${fontFiles.map((pathname, idx) => (
          `- ${idx < 9 ? 0 : ''}${idx + 1}: ` +
            chalk.underline(
              slash(pathname.startsWith('C:') ? pathname.slice(2) : pathname),
            )
        )).join('\n  ')}`
    );
  }

  const fontLoaderStyle = 
    `body { font-family: sans-serif; }\n` +
      `.fonts-loaded body { font-family: '${fontsToLoad[0].family}', sans-serif; }\n` +
      `.fonts-loaded .light { font-weight: 300; }\n` +
      `.fonts-loaded strong, .fonts-loaded .strong { font-weight: 500; }\n\n` +
      fontFaceRules.join('\n\n');

  const fontFacePath = path.join(paths.fontsAutogenerationDir, 'fontface-autogen.css');
  try {
    await fs.writeFile(fontFacePath, fontLoaderStyle);
  } catch (err) {
    console.error(chalk.red(
      `Encountered an error while writing the ${chalk.underline('@font-face')} file.`,
    ));

    printWarning(err);
    process.exit(1);
  }
})();
